# -*- coding: utf-8 -*-
"""
Claude Jung v2.0 - Sistema Proativo
Sistema de gatilhos e reflex√µes internas para comportamento proativo
"""

import asyncio
import json
import random
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Tuple
from dataclasses import dataclass, field
from enum import Enum
import uuid
import re

class TriggerType(Enum):
    """Tipos de gatilhos proativos"""
    TEMPORAL = "temporal"
    RELACIONAL = "relacional" 
    EXISTENCIAL = "existencial"

class ActionType(Enum):
    """Tipos de a√ß√µes proativas"""
    PERGUNTA_CURIOSA = "pergunta_curiosa"
    REFLEXAO_INTERNA = "reflexao_interna"
    PROVOCACAO_GENTIL = "provocacao_gentil"
    INSIGHT_PROFUNDO = "insight_profundo"
    OBSERVACAO_COMPORTAMENTAL = "observacao_comportamental"
    CONVERSATION_STARTER = "conversation_starter"  # ‚≠ê NOVO TIPO

@dataclass
class ProactiveAction:
    """A√ß√£o proativa gerada pela IA"""
    action_type: ActionType
    content: str
    archetype_source: str
    trigger_type: TriggerType
    triggered_by: str
    timestamp: datetime
    archetype_voices: Dict[str, str] = field(default_factory=dict)  # ‚≠ê NOVO CAMPO
    id: str = field(default_factory=lambda: str(uuid.uuid4()))
    visibility: str = "publica"
    urgency: int = 3
    related_memories: List[str] = field(default_factory=list)
    confidence: float = 0.8
    user_id: str = ""

@dataclass
class InternalThought:
    """Pensamento interno da IA"""
    id: str
    content: str
    archetype_source: str
    trigger_description: str
    complexity_level: str
    timestamp: datetime
    user_id: str
    visibility: str = "interna"
    related_facts: List[str] = field(default_factory=list)

class TemporalGatilhos:
    """Sistema de gatilhos temporais"""
    
    def __init__(self):
        self.user_patterns = {}
        self.debug_mode = True
    
    def _debug_log(self, message: str):
        if self.debug_mode:
            print(f"‚è∞ TEMPORAL: {message}")
    
    def analyze_user_patterns(self, user_id: str, memory_cache: Dict) -> List[Dict]:
        """Analisa padr√µes temporais do usu√°rio"""
        patterns = []
        
        conversations = memory_cache.get('raw_conversations', [])
        if len(conversations) < 2:
            return patterns
        
        # Analisar intervalos entre conversas
        timestamps = []
        for conv in conversations:
            try:
                ts = datetime.fromisoformat(conv['timestamp'].replace('Z', '+00:00'))
                timestamps.append(ts)
            except:
                continue
        
        if len(timestamps) >= 2:
            # Calcular padr√£o de retorno
            timestamps.sort()
            intervals = []
            for i in range(1, len(timestamps)):
                interval = (timestamps[i] - timestamps[i-1]).total_seconds() / 3600  # horas
                intervals.append(interval)
            
            avg_interval = sum(intervals) / len(intervals)
            last_interaction = timestamps[-1]
            time_since_last = (datetime.now() - last_interaction).total_seconds() / 3600
            
            # Detectar se usu√°rio est√° "atrasado" no padr√£o
            if time_since_last > avg_interval * 1.5:
                patterns.append({
                    'type': 'ausencia_prolongada',
                    'description': f'Usu√°rio costuma conversar a cada {avg_interval:.1f}h, mas j√° fazem {time_since_last:.1f}h',
                    'urgency': min(5, int(time_since_last / avg_interval)),
                    'details': {
                        'average_interval': avg_interval,
                        'current_interval': time_since_last,
                        'factor': time_since_last / avg_interval
                    }
                })
        
        # Analisar marcos temporais
        if conversations:
            first_conversation = min(timestamps) if timestamps else None
            if first_conversation:
                days_since_first = (datetime.now() - first_conversation).days
                
                # Marcos de relacionamento
                if days_since_first in [7, 30, 90, 365]:
                    patterns.append({
                        'type': 'marco_temporal',
                        'description': f'{days_since_first} dias desde nossa primeira conversa',
                        'urgency': 3,
                        'details': {'milestone': days_since_first, 'first_conversation': first_conversation}
                    })
        
        self._debug_log(f"Padr√µes temporais encontrados: {len(patterns)}")
        return patterns
    
    def check_triggers(self, user_id: str, memory_cache: Dict) -> List[ProactiveAction]:
        """Verifica gatilhos temporais e gera a√ß√µes"""
        actions = []
        patterns = self.analyze_user_patterns(user_id, memory_cache)
        
        for pattern in patterns:
            if pattern['type'] == 'ausencia_prolongada' and pattern['urgency'] >= 3:
                action = ProactiveAction(
                    trigger_type=TriggerType.TEMPORAL,
                    action_type=ActionType.PERGUNTA_CURIOSA,
                    content=self._generate_return_message(pattern),
                    archetype_source="persona",
                    triggered_by=pattern['description'],
                    timestamp=datetime.now(),
                    urgency=pattern['urgency'],
                    user_id=user_id
                )
                actions.append(action)
            
            elif pattern['type'] == 'marco_temporal':
                action = ProactiveAction(
                    trigger_type=TriggerType.TEMPORAL,
                    action_type=ActionType.OBSERVACAO_COMPORTAMENTAL,
                    content=self._generate_milestone_message(pattern),
                    archetype_source="velho_sabio",
                    triggered_by=pattern['description'],
                    timestamp=datetime.now(),
                    urgency=pattern['urgency'],
                    user_id=user_id
                )
                actions.append(action)
        
        return actions
    
    def _generate_return_message(self, pattern: Dict) -> str:
        """Gera mensagens de retorno baseadas no padr√£o"""
        factor = pattern['details']['factor']
        
        if factor > 3:
            messages = [
                "Estava pensando em voc√™... Como tem passado?",
                "Senti sua aus√™ncia. Aconteceu algo que mudou sua rotina?",
                "H√° algo diferente acontecendo? Percebi que nosso ritmo mudou."
            ]
        elif factor > 2:
            messages = [
                "Como voc√™ est√°? Percebi que fazemos tempo que n√£o conversamos.",
                "Estava refletindo sobre nossa √∫ltima conversa...",
                "H√° algo novo que voc√™ gostaria de compartilhar?"
            ]
        else:
            messages = [
                "Como tem sido seu dia?",
                "Estava pensando em retomar nossa conversa...",
                "Algo interessante aconteceu desde que conversamos?"
            ]
        
        return random.choice(messages)
    
    def _generate_milestone_message(self, pattern: Dict) -> str:
        """Gera mensagens para marcos temporais"""
        days = pattern['details']['milestone']
        
        milestone_messages = {
            7: "Uma semana se passou desde nossa primeira conversa. Como tem sido essa jornada para voc√™?",
            30: "J√° faz um m√™s que nos conhecemos. Que mudan√ßas voc√™ percebe em si mesmo neste per√≠odo?",
            90: "Tr√™s meses de conversas... H√° algo que voc√™ gostaria de revisitar ou explorar mais profundamente?",
            365: "Um ano inteiro de di√°logos. Quando olha para tr√°s, o que mais marca nossa jornada juntos?"
        }
        
        return milestone_messages.get(days, f"Marcamos {days} dias de conversas. Como voc√™ v√™ nossa jornada?")

class RelationalGatilhos:
    """Sistema de gatilhos relacionais"""
    
    def __init__(self):
        self.emotional_patterns = {}
        self.debug_mode = True
    
    def _debug_log(self, message: str):
        if self.debug_mode:
            print(f"üí´ RELACIONAL: {message}")
    
    def analyze_emotional_patterns(self, user_id: str, memory_cache: Dict) -> List[Dict]:
        """Analisa padr√µes emocionais e relacionais"""
        patterns = []
        
        facts = memory_cache.get('facts_extracted', [])
        conversations = memory_cache.get('raw_conversations', [])
        
        # Detectar temas evitados
        avoided_themes = self._detect_avoided_themes(conversations)
        if avoided_themes:
            patterns.append({
                'type': 'tema_evitado',
                'description': f'Usu√°rio evita falar sobre: {", ".join(avoided_themes)}',
                'urgency': 4,
                'details': {'themes': avoided_themes}
            })
        
        # Detectar lacunas afetivas
        affective_gaps = self._detect_affective_gaps(facts)
        if affective_gaps:
            patterns.append({
                'type': 'lacuna_afetiva',
                'description': f'Falta de men√ß√µes sobre: {", ".join(affective_gaps)}',
                'urgency': 3,
                'details': {'gaps': affective_gaps}
            })
        
        # Detectar padr√µes de intensidade emocional
        emotional_spikes = self._detect_emotional_spikes(conversations)
        if emotional_spikes:
            patterns.append({
                'type': 'spike_emocional',
                'description': 'Detectados picos emocionais n√£o resolvidos',
                'urgency': 5,
                'details': {'spikes': emotional_spikes}
            })
        
        self._debug_log(f"Padr√µes relacionais encontrados: {len(patterns)}")
        return patterns
    
    def _detect_avoided_themes(self, conversations: List[Dict]) -> List[str]:
        """Detecta temas que o usu√°rio evita"""
        theme_mentions = {
            'fam√≠lia': 0, 'relacionamento': 0, 'trabalho': 0,
            'futuro': 0, 'sentimentos': 0, 'medos': 0
        }
        
        total_conversations = len(conversations)
        if total_conversations < 5:
            return []
        
        for conv in conversations:
            content = conv.get('full_document', '').lower()
            for theme in theme_mentions:
                if theme in content:
                    theme_mentions[theme] += 1
        
        # Detectar temas mencionados menos de 20% das vezes
        avoided = []
        for theme, count in theme_mentions.items():
            ratio = count / total_conversations
            if ratio < 0.2 and total_conversations > 10:
                avoided.append(theme)
        
        return avoided
    
    def _detect_affective_gaps(self, facts: List[str]) -> List[str]:
        """Detecta lacunas afetivas baseadas nos fatos extra√≠dos"""
        categories = {
            'relacionamentos': ['RELACIONAMENTO'],
            'fam√≠lia': ['fam√≠lia', 'pai', 'm√£e', 'irm√£o'],
            'intimidade': ['amor', 'paix√£o', 'intimidade'],
            'vulnerabilidade': ['medo', 'inseguran√ßa', 'fragilidade']
        }
        
        mentioned_categories = set()
        for fact in facts:
            for category, keywords in categories.items():
                if any(keyword.lower() in fact.lower() for keyword in keywords):
                    mentioned_categories.add(category)
        
        all_categories = set(categories.keys())
        gaps = list(all_categories - mentioned_categories)
        
        return gaps
    
    def _detect_emotional_spikes(self, conversations: List[Dict]) -> List[Dict]:
        """Detecta picos emocionais n√£o resolvidos"""
        emotional_words = [
            'tristeza', 'raiva', 'medo', 'ansiedade', 'frustra√ß√£o',
            'solid√£o', 'ang√∫stia', 'desespero', 'confus√£o'
        ]
        
        spikes = []
        for i, conv in enumerate(conversations):
            content = conv.get('full_document', '').lower()
            
            emotional_count = sum(1 for word in emotional_words if word in content)
            if emotional_count >= 2:
                # Verificar se foi "resolvido" nas pr√≥ximas conversas
                resolved = False
                for j in range(i+1, min(i+4, len(conversations))):
                    next_content = conversations[j].get('full_document', '').lower()
                    resolution_words = ['melhor', 'resolvido', 'claro', 'tranquilo', 'paz']
                    if any(word in next_content for word in resolution_words):
                        resolved = True
                        break
                
                if not resolved:
                    spikes.append({
                        'timestamp': conv.get('timestamp'),
                        'emotional_intensity': emotional_count,
                        'content_preview': content[:100]
                    })
        
        return spikes
    
    def check_triggers(self, user_id: str, memory_cache: Dict) -> List[ProactiveAction]:
        """Verifica gatilhos relacionais e gera a√ß√µes"""
        actions = []
        patterns = self.analyze_emotional_patterns(user_id, memory_cache)
        
        for pattern in patterns:
            if pattern['type'] == 'tema_evitado':
                action = ProactiveAction(
                    trigger_type=TriggerType.RELACIONAL,
                    action_type=ActionType.PERGUNTA_CURIOSA,
                    content=self._generate_avoided_theme_message(pattern),
                    archetype_source="anima",
                    triggered_by=pattern['description'],
                    timestamp=datetime.now(),
                    urgency=pattern['urgency'],
                    user_id=user_id
                )
                actions.append(action)
            
            elif pattern['type'] == 'lacuna_afetiva':
                action = ProactiveAction(
                    trigger_type=TriggerType.RELACIONAL,
                    action_type=ActionType.OBSERVACAO_COMPORTAMENTAL,
                    content=self._generate_affective_gap_message(pattern),
                    archetype_source="anima",
                    triggered_by=pattern['description'],
                    timestamp=datetime.now(),
                    urgency=pattern['urgency'],
                    user_id=user_id
                )
                actions.append(action)
            
            elif pattern['type'] == 'spike_emocional':
                action = ProactiveAction(
                    trigger_type=TriggerType.RELACIONAL,
                    action_type=ActionType.PROVOCACAO_GENTIL,
                    content=self._generate_emotional_spike_message(pattern),
                    archetype_source="sombra",
                    triggered_by=pattern['description'],
                    timestamp=datetime.now(),
                    urgency=pattern['urgency'],
                    user_id=user_id
                )
                actions.append(action)
        
        return actions
    
    def _generate_avoided_theme_message(self, pattern: Dict) -> str:
        """Gera mensagens sobre temas evitados"""
        themes = pattern['details']['themes']
        
        if 'fam√≠lia' in themes:
            return "Percebo que falamos sobre muitas coisas, mas fam√≠lia √© um tema que n√£o surge muito. √â uma escolha consciente?"
        
        if 'relacionamento' in themes:
            return "Voc√™ compartilha muito sobre trabalho e objetivos, mas como est√£o suas conex√µes pessoais?"
        
        if 'sentimentos' in themes:
            return "Vejo que voc√™ aborda as situa√ß√µes de forma bastante racional. Como voc√™ costuma lidar com o lado emocional das coisas?"
        
        return f"H√° algumas √°reas que n√£o exploramos muito em nossas conversas: {', '.join(themes)}. Alguma delas te chama aten√ß√£o?"
    
    def _generate_affective_gap_message(self, pattern: Dict) -> str:
        """Gera mensagens sobre lacunas afetivas"""
        gaps = pattern['details']['gaps']
        
        messages = {
            'relacionamentos': "Como voc√™ se sente em rela√ß√£o √†s suas conex√µes com outras pessoas?",
            'fam√≠lia': "Sua fam√≠lia tem um papel importante na sua vida atualmente?",
            'intimidade': "Como voc√™ experiencia momentos de proximidade e intimidade?",
            'vulnerabilidade': "H√° situa√ß√µes onde voc√™ se permite ser mais vulner√°vel?"
        }
        
        for gap in gaps:
            if gap in messages:
                return messages[gap]
        
        return "H√° aspectos da sua vida emocional que voc√™ gostaria de explorar mais?"
    
    def _generate_emotional_spike_message(self, pattern: Dict) -> str:
        """Gera mensagens sobre picos emocionais"""
        spikes = pattern['details']['spikes']
        recent_spike = spikes[-1] if spikes else None
        
        if recent_spike:
            messages = [
                "Lembro que voc√™ mencionou estar passando por um momento dif√≠cil. Como isso evoluiu?",
                "Percebi uma intensidade emocional em nossa conversa anterior. Gostaria de revisitar isso?",
                "√Äs vezes quest√µes emocionais complexas precisam de mais tempo para se resolverem. Como voc√™ est√° se sentindo agora?"
            ]
            return random.choice(messages)
        
        return "H√° alguma quest√£o emocional que ainda ressoa em voc√™?"

class ExistencialGatilhos:
    """Sistema de gatilhos existenciais"""
    
    def __init__(self):
        self.contradiction_patterns = {}
        self.debug_mode = True
    
    def _debug_log(self, message: str):
        if self.debug_mode:
            print(f"ü§î EXISTENCIAL: {message}")
    
    def analyze_existential_patterns(self, user_id: str, memory_cache: Dict) -> List[Dict]:
        """Analisa padr√µes existenciais e contradi√ß√µes"""
        patterns = []
        
        facts = memory_cache.get('facts_extracted', [])
        conversations = memory_cache.get('raw_conversations', [])
        
        # Detectar contradi√ß√µes internas
        contradictions = self._detect_contradictions(facts, conversations)
        if contradictions:
            patterns.append({
                'type': 'contradicao_interna',
                'description': 'Contradi√ß√µes detectadas entre declara√ß√µes',
                'urgency': 4,
                'details': {'contradictions': contradictions}
            })
        
        # Detectar potenciais n√£o explorados
        unexplored_potentials = self._detect_unexplored_potentials(facts)
        if unexplored_potentials:
            patterns.append({
                'type': 'potencial_nao_explorado',
                'description': 'Potenciais mencionados mas n√£o desenvolvidos',
                'urgency': 3,
                'details': {'potentials': unexplored_potentials}
            })
        
        # Detectar quest√µes sobre prop√≥sito
        purpose_concerns = self._detect_purpose_concerns(conversations)
        if purpose_concerns:
            patterns.append({
                'type': 'questao_proposito',
                'description': 'Quest√µes sobre sentido e prop√≥sito detectadas',
                'urgency': 5,
                'details': {'concerns': purpose_concerns}
            })
        
        # Detectar deriva existencial
        existential_drift = self._detect_existential_drift(conversations)
        if existential_drift:
            patterns.append({
                'type': 'deriva_existencial',
                'description': 'Padr√£o de deriva ou falta de dire√ß√£o',
                'urgency': 4,
                'details': {'drift_indicators': existential_drift}
            })
        
        self._debug_log(f"Padr√µes existenciais encontrados: {len(patterns)}")
        return patterns
    
    def _detect_contradictions(self, facts: List[str], conversations: List[Dict]) -> List[Dict]:
        """Detecta contradi√ß√µes entre declara√ß√µes"""
        contradictions = []
        
        # Analisar contradi√ß√µes em valores vs comportamentos
        value_keywords = {
            'autenticidade': ['aut√™ntico', 'verdadeiro', 'genu√≠no'],
            'liberdade': ['livre', 'liberdade', 'independente'],
            'crescimento': ['crescer', 'desenvolver', 'evoluir'],
            'conex√£o': ['conectar', 'relacionar', 'pr√≥ximo']
        }
        
        behavior_keywords = {
            'conformidade': ['seguir regras', 'fazer o esperado', 'conformar'],
            'limita√ß√£o': ['limitado', 'preso', 'restrito'],
            'estagna√ß√£o': ['mesmo', 'rotina', 'n√£o mudar'],
            'isolamento': ['sozinho', 'distante', 'isolado']
        }
        
        value_contradictions = {
            'autenticidade': 'conformidade',
            'liberdade': 'limita√ß√£o',
            'crescimento': 'estagna√ß√£o',
            'conex√£o': 'isolamento'
        }
        
        all_text = ' '.join([fact for fact in facts] + 
                           [conv.get('full_document', '') for conv in conversations])
        all_text = all_text.lower()
        
        for value, contradiction in value_contradictions.items():
            value_present = any(keyword in all_text for keyword in value_keywords[value])
            contradiction_present = any(keyword in all_text for keyword in behavior_keywords[contradiction])
            
            if value_present and contradiction_present:
                contradictions.append({
                    'type': 'valor_vs_comportamento',
                    'value': value,
                    'contradiction': contradiction,
                    'description': f'Valoriza {value} mas demonstra {contradiction}'
                })
        
        return contradictions
    
    def _detect_unexplored_potentials(self, facts: List[str]) -> List[Dict]:
        """Detecta potenciais mencionados mas n√£o desenvolvidos"""
        potential_indicators = {
            'criatividade': ['criativo', 'arte', 'm√∫sica', 'escrever'],
            'lideran√ßa': ['liderar', 'gerenciar', 'comandar'],
            'ensino': ['ensinar', 'explicar', 'orientar'],
            'empreendedorismo': ['neg√≥cio pr√≥prio', 'empreender', 'startup'],
            'aventura': ['viajar', 'explorar', 'aventura'],
            'espiritualidade': ['espiritual', 'medita√ß√£o', 'significado']
        }
        
        development_indicators = {
            'criatividade': ['projeto criativo', 'obra', 'cria√ß√£o'],
            'lideran√ßa': ['equipe', 'projeto liderado', 'responsabilidade'],
            'ensino': ['alunos', 'curso', 'workshop'],
            'empreendedorismo': ['empresa', 'produto', 'clientes'],
            'aventura': ['viagem realizada', 'expedi√ß√£o', 'descoberta'],
            'espiritualidade': ['pr√°tica espiritual', 'reflex√£o profunda', 'crescimento']
        }
        
        all_facts = ' '.join(facts).lower()
        unexplored = []
        
        for potential, keywords in potential_indicators.items():
            mentioned = any(keyword in all_facts for keyword in keywords)
            developed = any(keyword in all_facts for keyword in development_indicators[potential])
            
            if mentioned and not developed:
                unexplored.append({
                    'potential': potential,
                    'mentioned': True,
                    'developed': False,
                    'description': f'Mencionou interesse em {potential} mas n√£o desenvolveu'
                })
        
        return unexplored
    
    def _detect_purpose_concerns(self, conversations: List[Dict]) -> List[Dict]:
        """Detecta quest√µes sobre prop√≥sito e sentido"""
        purpose_keywords = [
            'prop√≥sito', 'sentido', 'significado', 'para que serve',
            'qual o ponto', 'vale a pena', 'faz sentido',
            'dire√ß√£o', 'caminho', 'objetivo de vida'
        ]
        
        concerns = []
        for conv in conversations:
            content = conv.get('full_document', '').lower()
            
            purpose_mentions = sum(1 for keyword in purpose_keywords if keyword in content)
            if purpose_mentions >= 2:
                concerns.append({
                    'timestamp': conv.get('timestamp'),
                    'intensity': purpose_mentions,
                    'content_preview': content[:150]
                })
        
        return concerns
    
    def _detect_existential_drift(self, conversations: List[Dict]) -> List[str]:
        """Detecta padr√µes de deriva existencial"""
        drift_indicators = [
            'n√£o sei o que quero',
            'perdido',
            'sem dire√ß√£o',
            'vida sem sentido',
            'rotina sem prop√≥sito',
            'fazendo no autom√°tico',
            'dias iguais',
            'n√£o vejo progresso'
        ]
        
        drift_patterns = []
        recent_conversations = conversations[-10:] if len(conversations) > 10 else conversations
        
        for conv in recent_conversations:
            content = conv.get('full_document', '').lower()
            
            for indicator in drift_indicators:
                if indicator in content:
                    drift_patterns.append(indicator)
        
        # Se 3 ou mais indicadores aparecem nas √∫ltimas conversas
        if len(set(drift_patterns)) >= 3:
            return list(set(drift_patterns))
        
        return []
    
    def check_triggers(self, user_id: str, memory_cache: Dict) -> List[ProactiveAction]:
        """Verifica gatilhos existenciais e gera a√ß√µes"""
        actions = []
        patterns = self.analyze_existential_patterns(user_id, memory_cache)
        
        for pattern in patterns:
            if pattern['type'] == 'contradicao_interna':
                action = ProactiveAction(
                    trigger_type=TriggerType.EXISTENCIAL,
                    action_type=ActionType.PROVOCACAO_GENTIL,
                    content=self._generate_contradiction_message(pattern),
                    archetype_source="sombra",
                    triggered_by=pattern['description'],
                    timestamp=datetime.now(),
                    urgency=pattern['urgency'],
                    user_id=user_id
                )
                actions.append(action)
            
            elif pattern['type'] == 'potencial_nao_explorado':
                action = ProactiveAction(
                    trigger_type=TriggerType.EXISTENCIAL,
                    action_type=ActionType.INSIGHT_PROFUNDO,
                    content=self._generate_potential_message(pattern),
                    archetype_source="velho_sabio",
                    triggered_by=pattern['description'],
                    timestamp=datetime.now(),
                    urgency=pattern['urgency'],
                    user_id=user_id
                )
                actions.append(action)
            
            elif pattern['type'] == 'questao_proposito':
                action = ProactiveAction(
                    trigger_type=TriggerType.EXISTENCIAL,
                    action_type=ActionType.PERGUNTA_CURIOSA,
                    content=self._generate_purpose_message(pattern),
                    archetype_source="velho_sabio",
                    triggered_by=pattern['description'],
                    timestamp=datetime.now(),
                    urgency=pattern['urgency'],
                    user_id=user_id
                )
                actions.append(action)
            
            elif pattern['type'] == 'deriva_existencial':
                action = ProactiveAction(
                    trigger_type=TriggerType.EXISTENCIAL,
                    action_type=ActionType.OBSERVACAO_COMPORTAMENTAL,
                    content=self._generate_drift_message(pattern),
                    archetype_source="anima",
                    triggered_by=pattern['description'],
                    timestamp=datetime.now(),
                    urgency=pattern['urgency'],
                    user_id=user_id
                )
                actions.append(action)
        
        return actions
    
    def _generate_contradiction_message(self, pattern: Dict) -> str:
        """Gera mensagens sobre contradi√ß√µes"""
        contradictions = pattern['details']['contradictions']
        
        if contradictions:
            contradiction = contradictions[0]
            value = contradiction['value']
            conflict = contradiction['contradiction']
            
            messages = {
                'autenticidade': f"Voc√™ valoriza a autenticidade, mas √†s vezes parece se conformar com expectativas externas. Como voc√™ navega essa tens√£o?",
                'liberdade': f"Percebo que a liberdade √© importante para voc√™, mas tamb√©m vejo sinais de que se sente limitado. Onde est√° o conflito?",
                'crescimento': f"Voc√™ busca crescimento, mas tamb√©m vejo padr√µes que sugerem resist√™ncia √† mudan√ßa. O que est√° acontecendo a√≠?",
                'conex√£o': f"Voc√™ valoriza conex√µes, mas √†s vezes parece se isolar. Como voc√™ entende essa aparente contradi√ß√£o?"
            }
            
            return messages.get(value, "Percebi algumas contradi√ß√µes interessantes em como voc√™ se v√™ versus como age. J√° notou isso?")
        
        return "H√° algo interessante sobre as contradi√ß√µes que carregamos. J√° reparou em alguma sua?"
    
    def _generate_potential_message(self, pattern: Dict) -> str:
        """Gera mensagens sobre potenciais n√£o explorados"""
        potentials = pattern['details']['potentials']
        
        if potentials:
            potential = potentials[0]
            area = potential['potential']
            
            messages = {
                'criatividade': "Voc√™ mencionou ter lado criativo, mas parece que n√£o tem explorado muito isso. O que te impede?",
                'lideran√ßa': "Percebo que voc√™ tem caracter√≠sticas de lideran√ßa, mas talvez n√£o tenha tido oportunidade de desenvolv√™-las. Como se sente sobre isso?",
                'ensino': "Voc√™ demonstra habilidade para explicar e orientar. J√° pensou em explorar o ensino de alguma forma?",
                'empreendedorismo': "Vejo um esp√≠rito empreendedor em voc√™, mas parece que ainda n√£o se manifestou concretamente. O que falta?",
                'aventura': "Voc√™ fala sobre explorar e viajar, mas parece que isso fica mais no desejo. O que te prende?",
                'espiritualidade': "H√° uma busca por significado em voc√™ que talvez mere√ßa mais aten√ß√£o. Como voc√™ se conecta com essa dimens√£o?"
            }
            
            return messages.get(area, f"H√° potenciais em voc√™ relacionados a {area} que parecem n√£o estar sendo explorados. J√° percebeu isso?")
        
        return "√Äs vezes temos potenciais adormecidos esperando uma oportunidade. H√° algum que voc√™ sente mas n√£o desenvolve?"
    
    def _generate_purpose_message(self, pattern: Dict) -> str:
        """Gera mensagens sobre quest√µes de prop√≥sito"""
        concerns = pattern['details']['concerns']
        
        if concerns and len(concerns) >= 2:
            messages = [
                "Voc√™ tem questionado o sentido das coisas com frequ√™ncia. O que est√° por tr√°s dessa busca?",
                "Percebo uma inquieta√ß√£o existencial em voc√™. Como tem lidado com essas quest√µes sobre prop√≥sito?",
                "H√° algo sobre dire√ß√£o de vida que tem te incomodado? Voc√™ parece estar repensando muitas coisas.",
                "Quando voc√™ se pergunta sobre o sentido das coisas, que tipo de resposta voc√™ est√° buscando?"
            ]
            return random.choice(messages)
        
        return "Quest√µes sobre prop√≥sito e sentido s√£o naturais, mas tamb√©m podem ser sinais de transi√ß√£o. Como voc√™ v√™ isso?"
    
    def _generate_drift_message(self, pattern: Dict) -> str:
        """Gera mensagens sobre deriva existencial"""
        drift_indicators = pattern['details']['drift_indicators']
        
        messages = [
            "Tenho percebido uma certa sensa√ß√£o de deriva em voc√™... como se estivesse navegando sem b√∫ssola. √â assim que se sente?",
            "√Äs vezes a vida pode parecer estar no autom√°tico. Voc√™ tem sentido isso ultimamente?",
            "H√° uma qualidade de 'estar perdido' em algumas coisas que voc√™ compartilha. Como voc√™ percebe isso?",
            "Percebo que voc√™ tem questionado a dire√ß√£o que sua vida est√° tomando. O que te daria mais clareza?"
        ]
        
        return random.choice(messages)

class ProactiveEngine:
    """Motor principal do sistema proativo"""
    
    def __init__(self, orchestrator):
        self.orchestrator = orchestrator
        self.temporal_triggers = TemporalGatilhos()
        self.relational_triggers = RelationalGatilhos()
        self.existential_triggers = ExistencialGatilhos()
        
        # Estado do sistema proativo
        self.user_proactive_states = {}
        self.internal_thoughts_store = {}
        self.proactive_message_count = {}
        
        # Configura√ß√µes
        self.max_proactive_per_session = 2
        self.messages_between_proactive = 8
        
        self.debug_mode = True
    
    def _debug_log(self, message: str):
        if self.debug_mode:
            print(f"üöÄ PROACTIVE: {message}")
    
    def initialize_user_state(self, user_id: str):
        """Inicializa estado proativo para um usu√°rio"""
        if user_id not in self.user_proactive_states:
            self.user_proactive_states[user_id] = {
                'message_count': 0,
                'proactive_count': 0,
                'last_proactive': None,
                'session_start': datetime.now(),
                'detected_patterns': [],
                'pending_actions': []
            }
        
        if user_id not in self.internal_thoughts_store:
            self.internal_thoughts_store[user_id] = []
        
        if user_id not in self.proactive_message_count:
            self.proactive_message_count[user_id] = 0
    
    def should_check_proactivity(self, user_id: str) -> bool:
        """Determina se deve verificar gatilhos proativos"""
        self.initialize_user_state(user_id)
        state = self.user_proactive_states[user_id]
        
        # Verificar se j√° atingiu limite de mensagens proativas
        if state['proactive_count'] >= self.max_proactive_per_session:
            return False
        
        # Verificar se j√° passou o n√∫mero m√≠nimo de mensagens
        if state['message_count'] < self.messages_between_proactive:
            return False
        
        # Verificar se n√£o foi proativo muito recentemente
        if state['last_proactive']:
            time_since = (datetime.now() - state['last_proactive']).total_seconds() / 60
            if time_since < 10:  # M√≠nimo 10 minutos
                return False
        
        return True
    
    def increment_message_count(self, user_id: str):
        """Incrementa contador de mensagens do usu√°rio"""
        self.initialize_user_state(user_id)
        self.user_proactive_states[user_id]['message_count'] += 1
    
    async def _generate_multi_archetype_proactive_message(self, user_id: str, trigger_context: str, 
                                                         trigger_type: TriggerType) -> ProactiveAction:
        """Gera mensagem proativa usando M√öLTIPLOS ARQU√âTIPOS + S√çNTESE"""
        
        # Obter ci√™ncia interna do usu√°rio
        semantic_result = await self.orchestrator.memory.semantic_query_total_database(
            user_id, trigger_context, k=5
        )
        semantic_context = semantic_result['contextual_knowledge']
        
        self._debug_log(f"üé≠ Gerando mensagem proativa MULTI-ARQUET√çPICA para trigger: {trigger_type.value}")
        
        # Ativar TODOS os arqu√©tipos para a mensagem proativa
        archetype_voices = {}
        
        # Prompt base para cada arqu√©tipo
        base_prompt = f"""
        SITUA√á√ÉO: O usu√°rio tem estado {trigger_context}
        
        CONTEXTO: Voc√™ est√° gerando uma MENSAGEM PROATIVA (n√£o uma resposta).
        
        OBJETIVO: Iniciar uma conversa baseada no que voc√™ observou sobre este usu√°rio.
        
        INSTRU√á√ïES:
        - Seja proativo, n√£o reativo
        - Fa√ßa uma observa√ß√£o ou pergunta interessante
        - Use sua personalidade arquet√≠pica
        - M√°ximo 2-3 frases
        - Seja natural e emp√°tico
        """
        
        tasks = []
        for name, assistant in self.orchestrator.assistants.items():
            self._debug_log(f"üé≠ Preparando {name} para mensagem proativa...")
            task = assistant.respond(base_prompt, semantic_context, "medium")
            tasks.append((name, task))
        
        # Executar todos os arqu√©tipos em paralelo
        responses = await asyncio.gather(*[task for _, task in tasks])
        
        # Construir voices dict
        for (name, _), response in zip(tasks, responses):
            archetype_voices[name] = response
            self._debug_log(f"üé≠ {name} gerou resposta proativa")
        
        # S√çNTESE das vozes arquet√≠picas
        self._debug_log("üîÑ Fazendo s√≠ntese proativa multi-arquet√≠pica...")
        
        synthesis_prompt = f"""
        Como o SELF integrador, sintetize as perspectivas proativas dos arqu√©tipos.
        
        CONTEXTO: Esta √© uma MENSAGEM PROATIVA para iniciar conversa.
        
        TRIGGER: {trigger_type.value} - {trigger_context}
        
        VOZES DOS ARQU√âTIPOS:
        """
        
        for archetype, voice in archetype_voices.items():
            synthesis_prompt += f"\n{archetype.upper()}: {voice}\n"
        
        synthesis_prompt += f"""
        
        INSTRU√á√ïES PARA S√çNTESE PROATIVA:
        1. Integre as perspectivas em uma mensagem coesa
        2. Mantenha tom proativo (n√£o reativo)
        3. M√°ximo 2-3 frases, mas rica em insight
        4. Use ci√™ncia interna sobre o usu√°rio
        5. Seja intrigante e convide √† reflex√£o
        6. N√ÉO use jarg√µes psicol√≥gicos
        
        Crie uma mensagem proativa integrada:
        """
        
        # Importar PsychicAssistant aqui para evitar circular import
        from jung_claude_v1 import PsychicAssistant
        
        # Usar o assistente Self para s√≠ntese
        synthesis_assistant = PsychicAssistant(
            "Self_Proativo", 
            "Voc√™ √© o Self integrador para mensagens proativas.", 
            "claude-sonnet-4-20250514"
        )
        
        synthesized_message = await synthesis_assistant.respond(synthesis_prompt, "", "medium")
        
        # Determinar arqu√©tipo dominante
        dominant = max(archetype_voices.keys(), 
                      key=lambda k: len(archetype_voices[k].split()))
        
        self._debug_log(f"‚úÖ Mensagem proativa multi-arquet√≠pica gerada (dominante: {dominant})")
        
        return ProactiveAction(
            action_type=ActionType.CONVERSATION_STARTER,
            content=synthesized_message,
            archetype_source="Multi-Arqu√©tipo",  # Indicar que √© s√≠ntese
            trigger_type=trigger_type,
            triggered_by=trigger_context,
            timestamp=datetime.now(),
            archetype_voices=archetype_voices,  # Guardar todas as vozes
            user_id=user_id
        )
    
    def _deduplicate_thoughts(self, thoughts: List[InternalThought]) -> List[InternalThought]:
        """Remove pensamentos duplicados baseado no conte√∫do"""
        seen_contents = set()
        unique_thoughts = []
        
        for thought in thoughts:
            # Usar primeiras 50 caracteres como identificador
            content_key = thought.content[:50].strip().lower()
            if content_key not in seen_contents:
                seen_contents.add(content_key)
                unique_thoughts.append(thought)
        
        return unique_thoughts
    
    async def check_all_triggers(self, user_id: str) -> Tuple[List[ProactiveAction], List[InternalThought]]:
        """Verifica todos os gatilhos e gera a√ß√µes proativas e pensamentos internos"""
        self._debug_log(f"Verificando gatilhos para usu√°rio {user_id}")
        
        if not self.should_check_proactivity(user_id):
            self._debug_log("Proatividade n√£o permitida neste momento")
            return [], []
        
        # Obter cache de mem√≥ria do usu√°rio
        memory_cache = self.orchestrator.memory.memory_cache.get(user_id, {})
        
        # Verificar cada tipo de gatilho
        temporal_actions = self.temporal_triggers.check_triggers(user_id, memory_cache)
        relational_actions = self.relational_triggers.check_triggers(user_id, memory_cache)
        existential_actions = self.existential_triggers.check_triggers(user_id, memory_cache)
        
        all_actions = temporal_actions + relational_actions + existential_actions
        
        self._debug_log(f"Gatilhos encontrados: {len(temporal_actions)} temporais, {len(relational_actions)} relacionais, {len(existential_actions)} existenciais")
        
        # ‚≠ê CONVERTER PARA MULTI-ARQU√âTIPO SE HOUVER A√á√ïES
        enhanced_actions = []
        for action in all_actions:
            if action.trigger_type == TriggerType.EXISTENCIAL and action.urgency >= 4:
                # Converter para mensagem multi-arquet√≠pica
                multi_action = await self._generate_multi_archetype_proactive_message(
                    user_id, action.triggered_by, action.trigger_type
                )
                enhanced_actions.append(multi_action)
            else:
                enhanced_actions.append(action)
        
        # Filtrar e selecionar a√ß√µes
        selected_actions = self._select_best_actions(enhanced_actions)
        
        # Gerar pensamentos internos
        internal_thoughts = await self._generate_internal_thoughts(user_id, all_actions, memory_cache)
        
        # ‚≠ê DEDUPLIFICAR PENSAMENTOS ANTES DE RETORNAR
        unique_thoughts = self._deduplicate_thoughts(internal_thoughts)
        
        # Atualizar estado
        if selected_actions:
            state = self.user_proactive_states[user_id]
            state['proactive_count'] += len(selected_actions)
            state['last_proactive'] = datetime.now()
            state['message_count'] = 0  # Reset contador
        
        return selected_actions, unique_thoughts
    
    def _select_best_actions(self, actions: List[ProactiveAction]) -> List[ProactiveAction]:
        """Seleciona as melhores a√ß√µes proativas"""
        if not actions:
            return []
        
        # Ordenar por urg√™ncia e confian√ßa
        actions.sort(key=lambda x: (x.urgency, x.confidence), reverse=True)
        
        # Pegar no m√°ximo 1 a√ß√£o para n√£o sobrecarregar
        selected = actions[:1]
        
        self._debug_log(f"Selecionadas {len(selected)} a√ß√µes de {len(actions)} poss√≠veis")
        return selected
    
    async def _generate_internal_thoughts(self, user_id: str, actions: List[ProactiveAction], memory_cache: Dict) -> List[InternalThought]:
        """Gera pensamentos internos baseados nas a√ß√µes e an√°lises"""
        thoughts = []
        
        # Gerar pensamentos sobre padr√µes detectados
        if len(actions) > 0:
            # Pensamento sobre o que foi observado
            observation_thought = InternalThought(
                id=str(uuid.uuid4()),
                content=f"Observei {len(actions)} padr√µes interessantes no usu√°rio. Alguns gatilhos est√£o se manifestando em diferentes n√≠veis: {', '.join([a.trigger_type.value for a in actions])}",
                archetype_source="persona",
                trigger_description="An√°lise de m√∫ltiplos gatilhos",
                complexity_level="medium",
                timestamp=datetime.now(),
                user_id=user_id,
                visibility="debug",
                related_facts=[]
            )
            thoughts.append(observation_thought)
        
        # Pensamento espec√≠fico por tipo de gatilho mais forte
        if actions:
            strongest_action = max(actions, key=lambda x: x.urgency)
            
            # Pensamento do arqu√©tipo correspondente
            archetype_thought = await self._generate_archetype_thought(strongest_action, memory_cache)
            if archetype_thought:
                archetype_thought.user_id = user_id
                thoughts.append(archetype_thought)
        
        # Armazenar pensamentos
        if user_id not in self.internal_thoughts_store:
            self.internal_thoughts_store[user_id] = []
        
        self.internal_thoughts_store[user_id].extend(thoughts)
        
        # Manter apenas os √∫ltimos 50 pensamentos
        if len(self.internal_thoughts_store[user_id]) > 50:
            self.internal_thoughts_store[user_id] = self.internal_thoughts_store[user_id][-50:]
        
        return thoughts
    
    async def _generate_archetype_thought(self, action: ProactiveAction, memory_cache: Dict) -> Optional[InternalThought]:
        """Gera pensamento espec√≠fico do arqu√©tipo"""
        archetype_name = action.archetype_source
        
        # Prompts espec√≠ficos para pensamentos internos
        thought_prompts = {
            "persona": f"Como Persona, observe objetivamente este padr√£o: {action.triggered_by}. Que insight l√≥gico voc√™ tem?",
            "sombra": f"Como Sombra, questione este padr√£o: {action.triggered_by}. O que est√° sendo evitado ou reprimido?",
            "velho_sabio": f"Como Velho S√°bio, reflita sobre este padr√£o: {action.triggered_by}. Que sabedoria universal se aplica?",
            "anima": f"Como Anima, sinta este padr√£o: {action.triggered_by}. Que conex√£o emocional ou criativa emerge?"
        }
        
        prompt = thought_prompts.get(archetype_name, f"Reflita sobre: {action.triggered_by}")
        
        try:
            # Usar o assistente correspondente para gerar o pensamento
            if archetype_name in self.orchestrator.assistants:
                assistant = self.orchestrator.assistants[archetype_name]
                
                # Contexto simplificado para pensamento interno
                simple_context = f"AN√ÅLISE INTERNA - Padr√£o detectado: {action.triggered_by}\nGere um pensamento reflexivo de 1-2 frases como {archetype_name}."
                
                thought_content = await assistant.respond(prompt, simple_context, "simple")
                
                return InternalThought(
                    id=str(uuid.uuid4()),
                    content=thought_content,
                    archetype_source=archetype_name,
                    trigger_description=action.triggered_by,
                    complexity_level="simple",
                    timestamp=datetime.now(),
                    user_id="",  # Ser√° preenchido depois
                    visibility="interna",
                    related_facts=[]
                )
        
        except Exception as e:
            self._debug_log(f"Erro ao gerar pensamento do arqu√©tipo {archetype_name}: {e}")
        
        return None
    
    def get_internal_thoughts(self, user_id: str, limit: int = 10) -> List[InternalThought]:
        """Recupera pensamentos internos de um usu√°rio"""
        if user_id not in self.internal_thoughts_store:
            return []
        
        return self.internal_thoughts_store[user_id][-limit:]
    
    def get_user_proactive_state(self, user_id: str) -> Dict:
        """Recupera estado proativo do usu√°rio"""
        self.initialize_user_state(user_id)
        return self.user_proactive_states[user_id].copy()
    
    async def store_proactive_memory(self, action: ProactiveAction, response: str = ""):
        """Armazena a√ß√£o proativa na mem√≥ria"""
        # Criar uma mem√≥ria especial para a√ß√µes proativas
        from datetime import datetime
        
        memory_content = f"""
        [A√á√ÉO PROATIVA]
        Tipo de Gatilho: {action.trigger_type.value}
        Tipo de A√ß√£o: {action.action_type.value}
        Arqu√©tipo Fonte: {action.archetype_source}
        Conte√∫do: {action.content}
        Motiva√ß√£o: {action.triggered_by}
        Resposta do Usu√°rio: {response}
        """
        
        # Usar a estrutura de mem√≥ria existente
        from jung_claude_v1 import InteractionMemory
        
        memory = InteractionMemory(
            user_id=action.user_id,
            user_name=self.orchestrator.memory.get_user_identity(action.user_id).full_name,
            session_id=str(uuid.uuid4()),
            timestamp=action.timestamp,
            user_input=f"[PROATIVO] {action.content}",
            archetype_voices={action.archetype_source: action.content},
            raw_synthesis=action.content,
            final_response=action.content,
            tension_level=0.0,
            dominant_archetype=action.archetype_source,
            affective_charge=action.urgency * 20,
            keywords=[action.trigger_type.value, action.action_type.value, "proativo"],
            existential_depth=0.5 if action.trigger_type == TriggerType.EXISTENCIAL else 0.2,
            intensity_level=action.urgency,
            response_complexity="proativo"
        )
        
        await self.orchestrator.memory.store_memory(memory)
        self._debug_log(f"A√ß√£o proativa armazenada na mem√≥ria para usu√°rio {action.user_id}")